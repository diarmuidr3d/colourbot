package languageGenerator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;

import stanfordParser.Token;

/**
 * Simply substitutes nouns from Stack HashMap generated by an instance of {@link stanfordParser.StackBuilder StackBuilder} into a sentence from {@link stanfordParser.Parser StanfordParser} 
 * @author Diarmuid Ryan
 *
 */
public class TextSub implements LanguageGen{
	public TextSub() {
		
	}
	
	/**
	 * Generates a String sentence from a Parsed sentence and HashMap Stack
	 * @param sentence The sentence processed by {@link stanfordParser.Parser StanfordParser} into which the nouns will be subbed
	 * @param posTagMap The stack generated by an implementation of {@link stanfordParser.StackBuilder StackBuilder}
	 */
	public String process(ArrayList<Token> sentence, HashMap<String, Stack<Token>> posTagMap) {
		String retVal = "";
		for(Token word : sentence) {
			if ((posTagMap.containsKey(word.getPosTag())) && posTagMap.get(word.getPosTag()).size() > 0 && isNoun(word.getPosTag())) retVal += " "+posTagMap.get(word.getPosTag()).pop().getWord();
			else retVal += " "+word.getWord();
		}
		return retVal;
	}
	
	private boolean isNoun(String pos) {
		return ((pos.equals("NN")) || (pos.equals("NNS")) || (pos.equals("NNP")) || (pos.equals("NNPS")));
	}
}
